# -*- coding: cp1254 -*-
import math
import time


# bu fonksiyon yardýmýyla köke yaklaþýmý gözleyebiliyoruz.
def analiz(liste):
    for ind, i in enumerate(liste):
        if i != 0:
            print "x[%s] = %s" % (ind, i)


# fonksiyon deðerlerini "f" fonksiyonu yardýmýyla hesaplattýk...
def f(x, sbt):
    return math.e ** x - sbt

# sbt = e ^ x - c deki (c) ye sbt dedik.
# aralik listesi ile istediðimiz aralýktaki kökü arattýk.
# x0, x1 deðiþkenleri sekant yöntemi için gerekli olan 2 baþlangýç deðeridir.
# epsilon hata payýmýz...
def sekant(sbt=5, aralik=[-1, 2], x0=1.1, x1=1.23, epsilon=10**-9, iterasyon=100):
    t1 = time.clock()
    ind = 0 	 # döngü için index tuttuk.
    x = [0] * 20 # f[x] iþleminin sonuçlarýný x listesinde tuttuk.
    x[0] = x0 	 # ilk 2 deðer olan x0 ve x1 in deðerlerini listeye yerleþtirdik.
    x[1] = x1
    n = 1 		 # artýk n deðerimizi 1 den baþlatabiliriz...

    durum = False
    
    # döngü yardýmýyla Secant yöntemini uyguladýk.
    while ind < iterasyon:
        # sekant formülü
        x[n+1] = x[n] - f(x[n], sbt) * (x[n] - x[n-1]) / (f(x[n], sbt) - f(x[n-1], sbt))

        # iki kökün epsilon ile olan durumlarý burada karþýlaþtýrýldý.
        if abs(x[n + 1] - x[n]) > epsilon:
            n += 1
        else:
            for i in x[::-1]:
                if i != 0 and aralik[0] < i < aralik[1]: #bulunan kök aralýktaysa ekrana yazdýr.
                    print "Kök: ", i
                    durum = True
                    break
            break
        ind += 1

    t2 = time.clock()
    print "time:", t2 - t1
    if durum:
        analiz(x)
    else:
        print "[%s, %s] aralýðýnda epsilon = %s iken kök bulunamadý!" %(aralik[0], aralik[1], epsilon)

sekant()
