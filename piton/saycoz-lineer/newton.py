# -*- coding: cp1254 -*-
import math
import time


# bu fonksiyon ile bulunan x deðerlerini topluca ekrana yazdýrdýk.
def analiz(liste):
    for ind, i in enumerate(liste):
        if i != 0:
            print "x[%s] = %s" % (ind, i)

# fonksiyon: e ^ x - c
#       sbt: fonksiyonun genel formunda verilen c sabitini temsil etmektedir.
#        x0: girilmesi gereken bir baþlangýç deðeridir.
#   epsilon: hata payýný temsil etmektedir.
def newton(sbt=5, x0 = 1.5, aralik=[-5, 5], epsilon=10 ** -9, iterasyon=100):
    A = math.log(sbt)
    t1 = time.clock()
    ind = 0 		# döngü için bir index tuttuk.
    x = [0] * 20 	# x leri bu listede tutalým.
    n = 0 			# x ler için index n = 0 ayarladýk.
    x[n] = A + epsilon # x[0] deðerini hemen atadýk. Daha az iþlemde sonucu bulmak için x0 ý köke epsilon yakýnlýkta bir deðer seçtik.
    durum = False

    while ind < iterasyon:

        # her defasýnda n deðerinin bir fazlasý olan x deðerlerini buluyoruz
        # ör: ilk olarak n = 0 olduðundan
        # x[1] = x[0] - f[x] / f'[x] iþlemi yapýlýr ve sonucu 'x' listesine yazýlýr.
        x[n + 1] = x[n] - ((math.e ** x[n] - sbt) / math.e ** x[n])

        # her adýmda |x1 - x0| > epsilon kuralýna uygun if bloðunu yazdýk.
        if abs(x[n + 1] - x[n]) > epsilon:
            n += 1
        # eðer |x1 - x0| < epsilon ise kökü bulduk demektir.
        else:
            for i in x[::-1]:
                if i != 0 and aralik[0] < i < aralik[1]: # kök aralýklarda ise ekrana yaz, yoksa kök olmadýðýný söyle.
                    print "Kök: ", i
                    durum = True
                    break
            break
        ind += 1
    t2 = time.clock()
    # analiz fonksiyonunu çaðýrarak bulunan x1, x2, x3... deðerlerini ekrana yazdýk.
    print "time:", t2 - t1
    if durum:
        analiz(x)
    else:
        print "[%s, %s] aralýðýnda epsilon = %s iken kök bulunamadý!" % (aralik[0], aralik[1], epsilon)

# newton(20, 0.5, [1, 5], 10 ** -9, 20)
newton()
